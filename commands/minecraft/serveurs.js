const { SlashCommandBuilder, EmbedBuilder } = require('@discordjs/builders');
const { token_api } = require('../../config.json');
const fetch = require('node-fetch');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('serveur')
        .setDescription('Permet la gestion des serveurs de jeux Minecraft.')
        .addStringOption(option =>
            option.setName('action')
                .setDescription('Lancer ou arrÃªter le serveur.')
                .setRequired(true)
                .addChoices(
                    { name: 'Lancer', value: 'lancer' },
                    { name: 'ArrÃªter', value: 'arrÃªter' },
                    { name: 'Informations', value: 'infos'}
                )
            )
        .addStringOption(option =>
            option.setName('serveur')
                .setDescription('Le serveur principale (La Vanilla) ou un serveur secondaire.')
                .setRequired(true)
                .setAutocomplete(true)
            ),
            
    async autocomplete(interaction) {
        // RÃ©cupÃ¨re les donnÃ©es de l'API pour l'autocomplÃ©tion des serveurs
        async function getServerList() {
            const api_url = 'https://api.antredesloutres.fr/serveurs/actifs/jeu/Minecraft/';
            const response = await fetch(api_url);
            const data = await response.json();

            // console.log('[INFO] DonnÃ©es rÃ©cupÃ©rÃ©es pour l\'autocomplÃ©tion des serveurs : ', data);
            return data;
        }

        // On dÃ©clare "choices"
        let choices = [];
        
        try {
            const serverList = await getServerList();
            // console.log('[INFO] Liste des serveurs rÃ©cupÃ©rÃ©e pour l\'autocomplÃ©tion : ', serverList);
            
            for (const server of serverList) {
                if (server.path_serv.match(/serveurs-globaux|serveurs-investisseurs/)) {
                    server.type_serv = 'global';
                } else {
                    server.type_serv = 'd\'investisseurs';
                }
                
                choices = choices.concat({
                    name: server.nom_serv + ' (Serveur ' + server.type_serv + ')',
                    value: server.id_serv,
                });
            }

            // console.log('[INFO] Choix des serveurs pour l\'autocomplÃ©tion : ', choices);
            await interaction.respond(choices);
        } catch (error) {
            console.error('[ERROR] Erreur lors de la rÃ©cupÃ©ration des donnÃ©es pour l\'autocomplÃ©tion : ', error);
            await interaction.respond([
                {
                    name: 'Error',
                    value: 'Une erreur est survenue !'
                }
            ]).catch(err => console.error('[ERROR] Erreur lors de la rÃ©ponse Ã  l\'interaction : ', err));
        }
    },
    async execute(interaction) {
        const id_serv = interaction.options.getString('serveur');
        const action = interaction.options.getString('action');

        async function getServerInfos(id_serv) {
            const api_url = `https://api.antredesloutres.fr/serveurs/infos/${id_serv}`;
            const response = await fetch(api_url);
            const data = await response.json();

            data.id_serv = data.id_serv || 'ğŸ¥¸';
            data.jeu = data.jeu || 'ğŸ¥¸'
            data.nom_serv = data.nom_serv || 'ğŸ¥¸'
            data.modpack = data.modpack || 'ğŸ¥¸'
            data.modpack_url = data.modpack_url || 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';
            data.embedColor = data.embedColor || '#FFFFFF';
            data.nom_monde = data.nom_monde || 'ğŸ¥¸';
            data.version_serv = data.version_serv || 'ğŸ¥¸';
            data.path_serv = data.path_serv || 'ğŸ¥¸';
            data.start_script = data.start_script || 'ğŸ¥¸';
            data.administrateur = data.administrateur || 'ğŸ¥¸';
            data.actif = data.actif || false;
            data.nb_joueurs = data.nb_joueurs || 0;
            data.online = data.online || false;
            data.players = data.players || [];

            // On regarde si path_serv inclu "serveurs-globaux" ou "serveurs-investisseurs" avec une regex
            if (data.path_serv.match(/serveurs-globaux|serveurs-investisseurs/)) { data.type_serv = 'globaux'; }
            else { data.type_serv = 'investisseurs'; }

            return data;
        }

        if (!id_serv) {
            // Une rÃ©ponse alÃ©atoire parmi celles proposÃ©es
            const responses = [
                'Vous devez choisir un serveur parmi La Vanilla ou les serveurs secondaires.',
                'Il faut choisir un serveur pour pouvoir effectuer une action.',
                'Veuillez choisir un serveur pour effectuer une action.',
                'Il semblerait que vous ayez oubliÃ© de choisir un serveur.',
                'Il me manque le serveur sur lequel effectuer l\'action.',
                'Je crois que vous avez oubliÃ© de choisir un serveur ğŸ¥¸',
                'Mmmmh il manque le serveur pour effectuer l\'action ğŸ¥¸',
                'Ouais mais en fait il faut choisir un serveur pour effectuer une action ğŸ¥¸'
            ];
            // console.log('[INFO] ' + interaction.user.username + ' a oubliÃ© de choisir un serveur. RÃ©ponse alÃ©atoire renvoyÃ©e.');
            await interaction.reply('' + responses[Math.floor(Math.random() * responses.length)]);
            return;
        }

        try {
            const serverInfos = getServerInfos(id_serv);
            let ApiLink;
            if (action === 'lancer') {
                ApiLink = 'https://api.antredesloutres.fr/serveurs/start';
            } else if (action === 'arrÃªter') {
                ApiLink = 'https://api.antredesloutres.fr/serveurs/stop';
            } else if (action === 'infos') {
                    try {
                    const serverInfos = await getServerInfos(id_serv);
                    if (serverInfos.nom_serv !== 'La Vanilla') { serverInfos.type_serv = 'Secondaire'; }
                    else { serverInfos.type_serv = 'Primaire'; }
                    sendEmbed(
                        serverInfos.type_serv,
                        serverInfos.embedColor,
                        serverInfos.jeu,
                        serverInfos.nom_serv,
                        serverInfos.modpack,
                        serverInfos.modpack_url,
                        serverInfos.version_serv,
                        serverInfos.administrateur,
                        serverInfos.online ? 'En ligne' : 'Hors ligne',
                        serverInfos.players.length > 0 ? serverInfos.players.join(', ') : 'Aucun joueurs connectÃ©s',
                        interaction
                    );
                    return
                } catch (error) {
                    console.error('[ERROR] Erreur lors de la rÃ©cupÃ©ration des informations du serveur pour l\'action : ',  action, '. Erreur :', error);
                    await interaction.reply({content : `Erreur lors de la rÃ©cupÃ©ration des informations du serveur.`, ephemeral: true});
                    return;
                }
            } else {
                // Une rÃ©ponse alÃ©atoire parmi celles proposÃ©es
                const responses = [
                    'Vous devez choisir une action parmi lancer ou arrÃªter.',
                    'Il faut choisir une action pour pouvoir effectuer une action.',
                    'Veuillez choisir une action pour effectuer une action. Genre uh, lancer ou arrÃªter. Tu vois?',
                    'Il faut choisir une action pour pouvoir effectuer une action ğŸ¥¸',
                    "D'accord mais je ne sais pas quoi faire si vous ne choisissez pas une action ğŸ¥¸",
                ];
                await interaction.reply('' + responses[Math.floor(Math.random() * responses.length)]);
                return;
            }

            const fetch = (await import('node-fetch')).default;
            const response = await fetch(ApiLink, {
                method: 'POST',
                body: JSON.stringify({ id_serv: id_serv, client_token: token_api }),
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();

            if (data.status === "0") {
                await interaction.reply(`Le serveur est dÃ©jÃ  ${action === 'lancer' ? 'dÃ©marrÃ©' : 'arrÃªtÃ©'}.`);
            } else if (serverInfos.nb_joueurs > 0) {
                await interaction.reply(`Impossible d'arrÃªter le serveur, il y a ${serverInfos.nb_joueurs} joueur(s) connectÃ©(s).`);
            } else {
                console.log(`[INFO] ${interaction.user.username} a ${action === 'lancer' ? 'dÃ©marrÃ©' : 'arrÃªtÃ©'} le serveur ${id_serv}.`);
                await interaction.reply(`Le serveur est en cours de ${action === 'lancer' ? 'dÃ©marrage' : 'arrÃªt'}.`);
            }
        } catch (error) {
            console.error('[ERROR] Erreur lors de la requÃªte API:', error);
            if (action === 'infos') {
                await interaction.reply(`Erreur lors de la rÃ©cupÃ©ration des informations du serveur.`);
            } else {
                await interaction.reply(`Erreur lors ${action === 'lancer' ? 'du dÃ©marrage' : 'de l\'arrÃªt'} du serveur.`);
            }
        }
    },
};

function sendEmbed(serveur_type, embedColor, jeu, nom_serv, modpack, modpack_url, version_serv, administrateur, online_status, players, interaction) {
    let thumbnail_url = '';
    if (modpack === 'Minecraft Vanilla') {
        thumbnail_url = 'https://cdn.discordapp.com/attachments/1255156784134492170/1281433183656742932/mc_primaire.png';
    } else if (modpack === 'Palworld') {
        thumbnail_url = 'https://cdn.discordapp.com/attachments/1255156784134492170/1281434243922399272/palworld.webp';
    } else {
        thumbnail_url = 'https://cdn.discordapp.com/attachments/1255156784134492170/1281433183916785767/mc_secondaire.png';
    }

    let extra_message = '';
    if (online_status === 'Hors ligne') {
        extra_message = '\n\n**Le serveur est actuellement hors ligne, mais tu peut le lancer avec \`/serveur lancer\` ğŸ¥¸**';
    } else if (players === 'Aucun joueurs connectÃ©s') {
        extra_message = '\n\n**Allez, hop hop hop ! On rejoint le serveur ! ğŸ¥¸**';
    } else {
        extra_message = '\n\n**ğŸ¥¸**'
    };

    let serveur_port = '';
    if (serveur_type === 'Secondaire') {
        serveur_port = ':25564';
    }

    console.log(`[INFO] Envoi de l'embed d'informations du serveur ${nom_serv} Ã  ${interaction.user.username} : `, { serveur_type, embedColor, jeu, nom_serv, modpack, modpack_url, version_serv, administrateur, online_status, players });

    const embed = new EmbedBuilder()
        .setTitle(`Informations du serveur ${serveur_type} : ${nom_serv}`)
        .setURL("https://antredesloutres.fr")
        .setDescription(`**Jeu :** ${jeu} **(${version_serv})**\n**Modpack :** [${modpack}](${modpack_url})\n**Administrateur(s) :** ${administrateur}\n**IP : ** \`antredesloutres.fr${serveur_port}\`\n\n**Serveur :** ${online_status}\n**Joueurs :** ${players}` + extra_message)
        .setThumbnail(thumbnail_url)
        .setColor(parseInt(embedColor.replace('#', ''), 16))
        .setFooter({
            text: "Mineotter",
            iconURL: interaction.client.user.displayAvatarURL(),
        })
        .setTimestamp();
        
    interaction.reply({ embeds: [embed] });
}